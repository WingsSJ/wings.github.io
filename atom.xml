<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code~player~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codeplayer.fun/"/>
  <updated>2019-10-06T03:33:32.755Z</updated>
  <id>https://www.codeplayer.fun/</id>
  
  <author>
    <name>wings</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>漫谈云计算</title>
    <link href="https://www.codeplayer.fun/2019/10/06/%E6%BC%AB%E8%B0%88%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    <id>https://www.codeplayer.fun/2019/10/06/漫谈云计算/</id>
    <published>2019-10-05T16:11:09.000Z</published>
    <updated>2019-10-06T03:33:32.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p><strong>时间</strong>回溯到2000年，互联网开始流行了起来，许多企业开始了数字化转型。同时很多机构例如银行，<br>医院，学校…都希望将自己繁杂的需要人工处理的数据转移到服务器上去处理，与此同时，微软公司<br>发布了windows NT操作系统而在后来基于windows NT架构的windows 2000操作系统中引入了全新的服<br>务管理思想:<em>Active Directory</em>(活动目录,一种服务器集群的管理策略)所有的服务器都将加入到<br>一个域中,进行统一化的身份认证和管理<br><em>这是20年前微软对于服务器管理的一个构想</em></p><p><strong>虽然</strong>微软在那个时代走在了前列，但是很快，有另一家公司超越了它VMwave，一家专注于虚拟机技术<br>的公司。所谓虚拟机，它作为软件运行在操作系统上，本身属于一种应用程序，而这个应用程序本身可以<br>提供一套虚拟出来的硬件平台，能够在它虚拟出的硬件平台中运行其他的操作系统。<br>这项技术对于个人而言允许用户在同一台电脑（WorkStation）上运行不同平台支持的软件，而对于企业<br>级用户这项技术(Vsphere)对比于物理的服务器其优势也是显而意见的，由于资源是可以通过软件控制的，<br>所以在用户进行付款之后，其获取的服务的资源可以通过代码来进行控制。当然，微软也要抢占这部分的<br>市场，推出了hyperV产品。时至今日，有关虚拟化的产品和项目已经非常丰富（QEMV，XEN，KVM……）</p><p><strong>为什么</strong>这些公司要提供这些虚拟的设备？要知道，组建一个真实的数据中心是非常昂贵的，你需要机房，<br>服务器，机架，电源柜…然后将服务器放置到机架上，再一台台接通电源，调试配置网络……所以<br>在2000年左右只有传统的大型企业才有能力组建自己的服务器。而对于个人用户或者传统中小企业，则需<br>要租借服务器来运行自己的软件。</p><p><strong>云计算</strong>的本质概念就是:<em>按量计算的公有计算资源</em>而在云计算的平台上，我们每个人买到的不是<br>服务器而是计算资源的使用权。在这种思维下，诞生了很多云计算提供商，国外的 Amazon的AWS<br>Google的GCP MS的Azure……国内的阿里云 腾讯云……</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><strong>云计算技术</strong>开始广泛的应用，时至今日，云计算又演变出了更高的层级。</p><p><strong>2000年</strong>我们需要有自己的机房 电力 网络 ip，再高层一点 我们还要有自己的服务器 处理器 内存<br>在这个基础上我们还要有 操作系统(os)，运行时(runtime)，框架（framework），代码（logic），<br>业务（service）…这样才算形成一个对外服务别人的软件<br>（有第三方公司（vultr）提供基本的机房 电力和网络 需要用户自己去维护物理机 相当于自己购买了<br>一台物理机）</p><p><strong>2014年</strong>虚拟化技术普遍应用 我们可以直接从阿里云 腾讯云直接购买虚拟机 ，我们只需要关心OS以<br>上的东西 这种称其为<em>Iaas（基础设施服务）</em></p><p><strong>更高层级的</strong>类似于Google app engine，我们可以购买到应用容器服务，它会提供runtime以上的服务，<br>我们只需要将自己编写好的代码编译为二进制并上传，服务提供商就会在合适的时间 负载 计算量来调用<br>你的应用让你的应用运行起来 这种类型服务称之为<em>Pass（平台级应用服务）</em></p><p><strong>如果</strong>服务商连框架都提供好了，我们只需要编写对应的业务代码，那么这种服务就称其为<br><em>Faas（函数级服务的云计算）</em></p><p><strong>更多的时候</strong>作为开发者或者用户，我们什么都不想提供，我们只想要其他人给我们做好的，那么这种<br>服务就叫<em>Sass（软件集服务）</em> 例如微软的outlook（我们不需要写一行代码，直接缴费即可）<br>而这种软件服务往往故障率是最低的<br><strong>时至今日</strong>还有更为高层的服务，比如最近比较火热的容器服务，你可以购买一个容器节点来运行你的<br>docker应用程序，或者是购买kubernetes集群 或者是 Services Fabric计算集群服务，客户可以通过这些<br>服务一键部署自己的集群服务，自动扩展自己的应用</p><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><p><strong>正是因为这些技术的诞生</strong><br>让构建软件成为了一件不那么难的事情，所以在2014-2015年涌现出了大量中小型互联网公司，<br>而由于这些互联网公司逐渐的深入到了我们生活的方方面面，我们对数据的收集和控制也变得更加有挑<br>战性，这也催生出了大数据分布式计算，而随着大数据 分布式计算问题的解决，又有更深层次问题出现<br>人工智能…..可以说云计算的技术是承上启下的，虚拟化技术催生了云计算，而云计算技术为人工智能<br>的发展起到了促进作用。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><strong>一些反思，写在最后</strong><br>1.现实中的问题催生了新技术的产生，具有现实性<br>2.技术不会凭空产生或消亡，旧技术往往是新技术迭代的基石，具有周期性<br>3.新技术的产生会催生其他领域的诞生或推动其他技术进步，具有相互性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;时间&lt;/strong&gt;回溯到2000年，互联网开始流行了起来，许多企业开始了数字化转型。同时很多机构例如银行，&lt;br&gt;医院，
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.codeplayer.fun/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>吃完这碗青春饭</title>
    <link href="https://www.codeplayer.fun/2019/04/15/%E5%90%83%E5%AE%8C%E8%BF%99%E7%A2%97%E9%9D%92%E6%98%A5%E9%A5%AD/"/>
    <id>https://www.codeplayer.fun/2019/04/15/吃完这碗青春饭/</id>
    <published>2019-04-15T14:17:59.000Z</published>
    <updated>2019-04-15T14:50:22.594Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到的一篇文章，觉得很有意思，分享之。</p><p>17年初，网上流传华为公司正在清理34岁以上的员工，华为公司否认该消息。但是，不久以后又传出了一个消息，华为规定45岁必须退休；而上周，中兴通信一位42岁的程序员跳楼自杀，留下了四位老人和一对年幼的儿女。难过和遗憾之外，我的脸突然感觉好疼。</p><p><em>在国内，程序员这个行业，第一线编程最多做到34岁，中层最多做到45岁。 - 阮一峰</em></p><p>昨天有位读者在后台留言，希望我写写对这件事的看法，起初有点犹疑，一是觉得置身事外，难以体会事中人的荒凉；二是距离危机的年纪尚有时日，我所看到的是，还有乐趣值得去探索，还有挑战值得去踏平，周遭莺歌燕舞，前方枪林弹雨。</p><p>知乎上有位朋友克里斯蒂娜酱，从她的角度做了些剖析，给了些技术性的建议，我真心觉得很好。</p><p>中兴程序员坠楼事件：男人四十，人生半局</p><p>但你要问怎么看待？我无法看待。</p><p>九十年代初，父亲是一家乡镇建筑企业的领导，大兴土木的时代背景让他们躺着也能赚钱，直到98年经济危机、深化改革、人员裁退。两三年的时间里，父亲没有事情做也没有收入，靠着一点会计知识给个体户打工，遇上仓库卸货，还得挪着将近五十岁的老腰，一卷卷搬动上百斤的电缆。</p><p>难以想象一生都在做文职工作的父亲，是怎么来的力气。也许是一家人的担子，也许是两个正在念书的孩子。</p><p>以至于他的儿子都在最叛逆的年纪疏远了，他不忍看父亲的逆旅；以至于他的儿子一度努力的根源和决心，是不愿重复父亲的逆旅。</p><p>但是，即便是他的儿子，也无法真正理解面对中年危机时的困顿、失落与心焦；儿子即便是再努力，也不能保证不会重复父亲的逆旅。个体身处时代洪流的渺小，纠缠着天命、运气、选择，稍有不慎就跌落阶层的断崖。</p><p>只能说每个人都有他要去走的路。</p><p>所以你问我怎么办？我也没有100%的主意，但也许我能给30%的建议：</p><p><strong>比努力更努力</strong>。除了在工作上付出120%的努力，业余的时间，不管是做项目、学技术、学投资、写文章、交朋友，保证自己有其他方向的积累，保证自己能掌握更多前沿的信息，保证自己能更多参与有成长性的事情，不至于在下一个浪潮来到之际没有掉头的可能。</p><p><strong>不要畏惧变化</strong>。近十年的行业热点由快消到通信再到互联网，行业起起落落，但优秀的人才总是流动不息的。从BAT的高管到骨干，来自旧时代优秀企业的人比比皆是，而且往往你移动得越早，享受的溢价就越大。从顶峰行业到新兴行业必然有所舍弃，像出差时住什么级别酒店，看牙医有没有全额保险，你要相信，这都是极其不重要的细枝末节。</p><p><strong>相信技术长期的成长性</strong>。这里的技术可以特指计算机技术。也许有一天互联网行业衰落了，但我相信建筑了互联网的计算机技术还会继续发展，不管是以人工智能、虚拟现实还是别种形态存在，只要你是持续的创新者，坚持去学习新的技术，那么你不会轻易被时代所淘汰。</p><p><strong>时刻擦亮你的枪</strong>。如果做好了以上三点还陷入逆旅，那怎么办？别无选择，那就向前！衣食无忧最容易滋生惰性，所以要切忌护好自己善战能战的心态，不管是去跑马、去徒步、去搏击，即便是中年油腻，也要有猛虎藏于心间。</p><p><em>人生就是不停的战斗。 - 九把刀</em></p><p>最后以一个智慧老头的话作为结语，这也许才是最好的职业建议：</p><p><em>为什么现在你要找一个你不喜欢的工作，你不觉得这就好像把你的性生活省下来到晚年的时候再用吗?</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看到的一篇文章，觉得很有意思，分享之。&lt;/p&gt;
&lt;p&gt;17年初，网上流传华为公司正在清理34岁以上的员工，华为公司否认该消息。但是，不久以后又传出了一个消息，华为规定45岁必须退休；而上周，中兴通信一位42岁的程序员跳楼自杀，留下了四位老人和一对年幼的儿女。难过和遗憾之
      
    
    </summary>
    
    
      <category term="转载" scheme="https://www.codeplayer.fun/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="极客思享" scheme="https://www.codeplayer.fun/tags/%E6%9E%81%E5%AE%A2%E6%80%9D%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>能力不是最重要的</title>
    <link href="https://www.codeplayer.fun/2019/03/19/%E8%83%BD%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84/"/>
    <id>https://www.codeplayer.fun/2019/03/19/能力不是最重要的/</id>
    <published>2019-03-19T15:44:16.000Z</published>
    <updated>2019-03-19T16:08:19.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>Simon Sinek: 賽門西奈克:偉大的領袖如何鼓動行為 | TED Talk<br>观看链接:<a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw" target="_blank" rel="noopener">https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw</a></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>塞穆尔·兰利有钱、有技术、有人，却没有成为第一个飞起来的人；而莱特兄弟没有钱、没有技术、没有人，却成功了；<br>他们之间的惟一区别是：<br>如果你聘用一个人只是因为他有能力完成这份工作，那么这个人来工作就只是为了你发的那份薪水。<br>如果你雇佣跟你有共同理念的人，那么他们就会为你付出热血、汗水和泪水。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>就算你现在一点都不具备这个岗位所需要的能力。<br>但是没关系，你有热情、够聪明、能认同自己从事的事业，相信自己以后一定能做好。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>我始终相信自己在现实的考量之外，内核更多是一个理想主义者。</p><h2 id="后记（摘抄自开放组织）"><a href="#后记（摘抄自开放组织）" class="headerlink" title="后记（摘抄自开放组织）"></a>后记（摘抄自开放组织）</h2><p>伟大的公司不会去招募技术好的人，然后激励他们前进。它们会招募那些已经具有进取心的人们，然后赋予他们灵感。<br>人分为两类：有进取心的和没有进取心的。对有进取心的人，你必须要给他们一些理由，一些高于他们工作本身的信念，<br>不然的话他们就会激励自己去寻找一份新的工作，这时你的公司里就只剩下另外一种人了。<br>如果你聘用一个人只是因为他有能力完成这份工作，那么这个人来工作就只是为了你发的那份薪水。<br>但如果你聘用的人也认同你的信仰，那么他就会全心全意、赴汤蹈火地为你工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;Simon Sinek: 賽門西奈克:偉大的領袖如何鼓動行為 | TED Talk&lt;br&gt;观看链接:&lt;a href=&quot;https://www.ted
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.codeplayer.fun/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="自省" scheme="https://www.codeplayer.fun/tags/%E8%87%AA%E7%9C%81/"/>
    
  </entry>
  
  <entry>
    <title>什么情况</title>
    <link href="https://www.codeplayer.fun/2019/01/28/%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5/"/>
    <id>https://www.codeplayer.fun/2019/01/28/什么情况/</id>
    <published>2019-01-27T17:44:29.000Z</published>
    <updated>2019-01-27T17:59:32.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天星期一"><a href="#今天星期一" class="headerlink" title="今天星期一"></a>今天星期一</h2><p> 有人在楼附近大喊大叫 很闹 爬起来吃点东西 正好电脑没关 顺便写点啥~<br> 看来 今天应该不会下雨 要是早上有人把我踹醒就好了 好吧现在有点困了<br> 继续睡~ over~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今天星期一&quot;&gt;&lt;a href=&quot;#今天星期一&quot; class=&quot;headerlink&quot; title=&quot;今天星期一&quot;&gt;&lt;/a&gt;今天星期一&lt;/h2&gt;&lt;p&gt; 有人在楼附近大喊大叫 很闹 爬起来吃点东西 正好电脑没关 顺便写点啥~&lt;br&gt; 看来 今天应该不会下雨 要是早上有
      
    
    </summary>
    
    
      <category term="虾扯蛋" scheme="https://www.codeplayer.fun/tags/%E8%99%BE%E6%89%AF%E8%9B%8B/"/>
    
  </entry>
  
</feed>
